@namespace MealPlanner.Components
@inject ILogger<LoginComponent> Logger

<div class="login-component">
    @if (string.IsNullOrEmpty(UserName))
    {
        @if (!showLoginForm)
        {
            <button class="btn btn-outline-primary btn-sm" @onclick="ShowLoginForm">Login</button>
        }
        else
        {
            <div class="login-form">
                <input type="text" class="form-control form-control-sm" @bind="tempUserName" @onkeypress="HandleKeyPress" placeholder="Enter your name" @ref="nameInput" />
                <div class="login-buttons">
                    <button class="btn btn-primary btn-sm" @onclick="SaveUserName">Save</button>
                    <button class="btn btn-secondary btn-sm" @onclick="CancelLogin">Cancel</button>
                </div>
            </div>
        }
    }
    else
    {
        <div class="user-info">
            <span class="user-greeting">Hello, @UserName!</span>
            <button class="btn btn-outline-secondary btn-sm ms-2" @onclick="ShowLoginForm">Change</button>
        </div>
    }
</div>

@code {
    [Parameter] public string UserName { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> UserNameChanged { get; set; }
    
    private bool showLoginForm = false;
    private string tempUserName = string.Empty;
    private ElementReference nameInput;

    private async Task ShowLoginForm()
    {
        Logger.LogInformation("ShowLoginForm called. Current UserName: '{UserName}'", UserName);
        tempUserName = UserName;
        showLoginForm = true;
        
        // Focus the input after the form is shown
        await Task.Delay(100);
        try
        {
            await nameInput.FocusAsync();
            Logger.LogInformation("Input focused successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error focusing input");
        }
    }

    private async Task SaveUserName()
    {
        Logger.LogInformation("SaveUserName called. TempUserName: '{TempUserName}'", tempUserName);
        try
        {
            if (!string.IsNullOrWhiteSpace(tempUserName))
            {
                var trimmedName = tempUserName.Trim();
                Logger.LogInformation("Setting UserName from '{OldName}' to '{NewName}'", UserName, trimmedName);
                UserName = trimmedName;
                await UserNameChanged.InvokeAsync(UserName);
                Logger.LogInformation("UserNameChanged event invoked successfully");
            }
            showLoginForm = false;
            tempUserName = string.Empty;
            Logger.LogInformation("SaveUserName completed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in SaveUserName");
        }
    }

    private void CancelLogin()
    {
        Logger.LogInformation("CancelLogin called");
        tempUserName = string.Empty;
        showLoginForm = false;
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SaveUserName();
        }
        else if (e.Key == "Escape")
        {
            CancelLogin();
        }
    }
}

<style>
    .login-component {
        display: inline-block;
    }

    .user-info {
        display: flex;
        align-items: center;
    }

    .user-greeting {
        color: #495057;
        font-size: 0.9em;
    }

    .login-form {
        display: flex;
        align-items: center;
        gap: 8px;
        background: #f8f9fa;
        padding: 8px;
        border-radius: 6px;
        border: 1px solid #dee2e6;
    }

    .login-form input {
        min-width: 150px;
    }

    .login-buttons {
        display: flex;
        gap: 4px;
    }

    @@media (max-width: 768px) {
        .login-form {
            flex-direction: column;
            align-items: stretch;
        }
        
        .login-form input {
            margin-bottom: 8px;
        }
    }
</style>